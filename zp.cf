comment "//" ;
comment "/*" "*/" ;

Prog. Program  ::= [Function] ;
Global. Function ::= Type Ident ";" ;
Fun.  Function ::= Type Ident "(" [Decl] ")" "{" [Stm] "}" ;
Dec.  Decl     ::= Type [Ident] ;

terminator Function "" ;
terminator Stm "" ;
separator  Decl "," ;
separator  nonempty Ident "," ;

SDecl.   Stm ::= Decl ";"  ;
SExp.    Stm ::= Exp ";" ;
SIf.     Stm ::= "if" "(" Exp ")" Stm ;
SIfThen. Stm ::= "if" "(" Exp ")" "then" Stm ;
SIfElse. Stm ::= "if" "(" Exp ")" Stm "else" Stm ; 
SIfThEl. Stm ::= "if" "(" Exp ")" "then" Stm "else" Stm ;
SRepUnt. Stm ::= "repeat" Stm "until" "(" Exp ")" ";" ;
SBlock.  Stm ::= "{" [Stm] "}" ;
SFor.    Stm ::= "for" "(" Exp ")" Stm ;
SForSc.  Stm ::= "for" "(" Exp ";" Exp ";" Exp  ")" Stm ;
SWhile.  Stm ::= "while" "(" Exp ")" Stm ;
SReturn. Stm ::= "return" Exp  ";" ;

EDecAss. Exp  ::= Type Ident "=" Exp ;
EAss.    Exp  ::= Ident "=" Exp ;
ELt.     Exp1 ::= Exp2 "<" Exp2 ;
ELtEq.   Exp1 ::= Exp2 "<=" Exp2 ;
EGt.     Exp1 ::= Exp2 ">" Exp2 ;
EGtEq.   Exp1 ::= Exp2 ">=" Exp2 ;
EEqto.   Exp1 ::= Exp2 "==" Exp2 ;
EAnd. 	 Exp3 ::= Exp "&&" Exp ;
EOr.     Exp3 ::= Exp "||" Exp ;
ENot.    Exp3 ::= "!" "(" Exp ")" ;
EAdd.    Exp2 ::= Exp2 "+" Exp3 ;
ESub.    Exp2 ::= Exp2 "-" Exp3 ;
EMul.    Exp3 ::= Exp3 "*" Exp4 ;
EDiv. 	 Exp3 ::= Exp3 "/" Exp4 ;
EMod. 	 Exp3 ::= Exp3 "%" Exp4 ;
Call.    Exp4 ::= Ident "(" [Exp] ")" ;
EVar.    Exp4 ::= Ident ;
EStr.    Exp4 ::= String ;
EInt.    Exp4 ::= Integer ;
EDouble. Exp4 ::= Double ;

coercions Exp 4 ;

separator Exp "," ;

TInt.    Type ::= "int" ;
TDouble. Type ::= "double" ;
